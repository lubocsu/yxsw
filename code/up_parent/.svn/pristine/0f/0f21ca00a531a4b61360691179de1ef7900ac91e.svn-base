package com.upsoft.yxsw.mobile;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.upsoft.login.support.webservice.ServiceReceiver;
import com.upsoft.login.support.webservice.SysUtils;
import com.upsoft.system.bean.PageBean;
import com.upsoft.system.bean.ResultBean;
import com.upsoft.system.bean.WSLoginInfoBean;
import com.upsoft.system.constant.LoginTipMsgConstants;
import com.upsoft.system.util.DateUtil;
import com.upsoft.system.util.ExceptionFormatUtil;
import com.upsoft.yxsw.mobile.bean.zyp.CxMakeDetailBean;
import com.upsoft.yxsw.service.BizTXjZypCxMakeService;

/**
* Copyright (c) 2017,重庆扬讯软件技术有限公司<br>
* All rights reserved.<br>
*
* 文件名称：QueryController.java<br>
* 摘要：查询巡检记录，作业票，扫一扫等查询类操作<br>
* -------------------------------------------------------<br>
* 取代版本：1.1.0<br>
* 原作者：胡毅<br>
* 完成日期：2017年9月25日<br>
 */
@Controller
@RequestMapping("/mobile/query")
public class QueryController {

	private Logger logger = Logger.getLogger(MobileController.class);
	@Autowired
	private BizTXjZypCxMakeService bizTXjZypCxMakeService;
	@Autowired
	private JdbcTemplate jdbcTemplate;

	/**
	 * 获取今日及以后以审核通过的作业票列表
	 * @date 2017年9月28日 下午3:58:15
	 * @author 胡毅
	 * @param tokenId
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getZYPList",method=RequestMethod.POST)
	@ResponseBody
	public ResultBean getZYPListForAPP(@RequestParam(required = true)String tokenId,HttpServletRequest request){
		PageBean pageBean = new PageBean(request);
		ResultBean result = new ResultBean();
		if(!ServiceReceiver.checkLogin(tokenId)){
			result.setFlag(false);
    		result.setMessage(LoginTipMsgConstants.LOGIN_EXPIRED);
    		return result;
		}
		try {
			WSLoginInfoBean loginInfo = SysUtils.getLoginInfo(request);
			Map<String,Object> data = bizTXjZypCxMakeService.getZYPListForAPP(pageBean,loginInfo.getCsOrgId());
			result.setData(data);
		} catch (Exception e) {
			logger.error("获取作业票列表异常："+ExceptionFormatUtil.formatExceptionTrace(e));
			result.setFlag(false);
			result.setMessage("获取作业票列表异常："+e.getMessage());
		}
		return result;
	}
	
	@RequestMapping(value = "/getZYPDetail",method=RequestMethod.POST)
	@ResponseBody
	public ResultBean getZYPDetailForAPP(@RequestParam(required = true)String tokenId,
										 @RequestParam(required = true)String cxMakeId,HttpServletRequest request){
		ResultBean result = new ResultBean();
		if(!ServiceReceiver.checkLogin(tokenId)){
			result.setFlag(false);
    		result.setMessage(LoginTipMsgConstants.LOGIN_EXPIRED);
    		return result;
		}
		try {
			CxMakeDetailBean _bean = bizTXjZypCxMakeService.getZYPDetail(cxMakeId);
			Map<String,Object> data = new HashMap<String,Object>();
			data.put("detail", _bean);
			result.setData(data);
		} catch (Exception e) {
			logger.error("获取作业票列表异常："+ExceptionFormatUtil.formatExceptionTrace(e));
			result.setFlag(false);
			result.setMessage("获取作业票列表异常："+e.getMessage());
		}
		return result;
	}
	
	/**
	 * 获取APP最新版本
	 * @date 2017年9月29日 下午5:01:01
	 * @author 胡毅
	 * @param request
	 * @param tokenId
	 * @return
	 */
    @RequestMapping(value="/getLasetVersion",method=RequestMethod.POST)
    @ResponseBody
    public ResultBean getLasetVersion(HttpServletRequest request,
    		 @RequestParam(value="tokenId",required=true) String tokenId){
        
        ResultBean result = new ResultBean();
		if(!ServiceReceiver.checkLogin(tokenId)){
			result.setFlag(false);
    		result.setMessage(LoginTipMsgConstants.LOGIN_EXPIRED);
    		return result;
		}
		try {
			String sql = "SELECT T.CURRENT_VERSION FROM SYS_VERSION_MANAGE T WHERE T.VERSION_TYPE='1' AND T.CHANGE_TIME = (SELECT MAX(T.CHANGE_TIME) FROM SYS_VERSION_MANAGE T WHERE T.VERSION_TYPE='1')";
			Map<String, Object> data = jdbcTemplate.queryForMap(sql);
			data.put("version", data.get("CURRENT_VERSION"));
			data.remove("CURRENT_VERSION");
			result.setData(data);
		} catch (Exception e) {
			logger.error("获取作业票列表异常："+ExceptionFormatUtil.formatExceptionTrace(e));
			result.setFlag(false);
			result.setMessage("获取作业票列表异常："+e.getMessage());
		}
		return result;
    }
    
    /**
	 * 历史APP版本
	 * @date 2017年9月29日 下午5:01:01
	 * @author 胡毅
	 * @param request
	 * @param tokenId
	 * @return
	 */
    @RequestMapping(value="/getVersionList",method=RequestMethod.POST)
    @ResponseBody
    public ResultBean getVersionList(HttpServletRequest request,
    		 @RequestParam(value="tokenId",required=true) String tokenId){
        
        ResultBean result = new ResultBean();
		if(!ServiceReceiver.checkLogin(tokenId)){
			result.setFlag(false);
    		result.setMessage(LoginTipMsgConstants.LOGIN_EXPIRED);
    		return result;
		}
		try {
			String sql = "SELECT T.ID, T.VERSION_TYPE, T.CHANGE_TIME, T.CHANGE_DESC, T.CREATE_TIME, T.CREATOR_ACCOUNT, T.CREATOR_NAME, T.CURRENT_VERSION_NAME, T.CURRENT_VERSION"
					+ " FROM SYS_VERSION_MANAGE T WHERE T.VERSION_TYPE='1'";
			List<Map<String, Object>> list = jdbcTemplate.queryForList(sql);
			List<Map<String, Object>> dataList = new ArrayList<Map<String, Object>>();
			for (Map<String, Object> map : list) {
				Map<String, Object> tmp = new HashMap<String,Object>();
				tmp.put("updateTime", DateUtil.stringToString(NVL(map.get("CHANGE_TIME")), "yyyyMMddHHmmss", "yyyy-MM-dd HH:mm:ss"));
				tmp.put("versionNum", NVL(map.get("CURRENT_VERSION")));
				tmp.put("versionName", NVL(map.get("CURRENT_VERSION_NAME")));
				tmp.put("versionDesc", NVL(map.get("CHANGE_DESC")));
				dataList.add(tmp);
			}
			Map<String,Object> data = new HashMap<String,Object>();
			data.put("versionList", dataList);
			result.setData(data);
		} catch (Exception e) {
			logger.error("获取作业票列表异常："+ExceptionFormatUtil.formatExceptionTrace(e));
			result.setFlag(false);
			result.setMessage("获取作业票列表异常："+e.getMessage());
		}
		return result;
    }
    
    private String NVL (Object o){
    	return null!=o?String.valueOf(o):"";
    }
    
    /**
     * 下载更新包
     * @date 2015年4月3日 下午1:53:21
     * @author 冉恒鑫
     * @param request
     * @return
     */
    @RequestMapping(value = "/downloadApk",method=RequestMethod.GET)
    public void downloadAPK(@RequestParam(value="versionName",required=true) String versionName,
    										HttpServletRequest request,HttpServletResponse response) {
    	String projectAbsolutePath = request.getSession().getServletContext().getRealPath("\\");
        File project = new File(projectAbsolutePath);
        String path =project.getParent()+"\\downloadFiles\\"+"apkFile\\app_yxsw"+versionName+".apk";
        File file = new File(path);
        if(!file.exists()){
        	return;
        }
        String fileName = file.getName();
        Long fileLength = file.length();
        response.setContentType("application/vnd.android.package-archive;");
        response.setHeader("Content-disposition", "attachment; filename=" + fileName);
        response.setHeader("Content-Length", String.valueOf(fileLength));
        InputStream is = null;
        OutputStream os = null;
        try{
            is = new BufferedInputStream(new FileInputStream(file));
            os = new BufferedOutputStream(response.getOutputStream());
            byte[] bytes = new byte[is.available()];
            while(is.read(bytes) != -1){
                os.write(bytes);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally{
            try{
                if(is != null){
                    is.close();
                }
                if (os != null) {
                    os.close();
                }
            }catch (IOException e){
                e.printStackTrace();
            }
        }
    }
}
